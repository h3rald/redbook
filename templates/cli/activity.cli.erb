<%
	def item(label, value)
		"#{label.to_s.dark_cyan}: #{value.to_s.cyan}"
	end
	
	@padding = ' '*(Math.log10(@total).floor-Math.log10(@index).floor + 1)

	timestamp = @entry.timestamp.textualize.dark_cyan

	text = @entry.text.cyan

	index =	@padding+@index.to_s.cyan

	def icon
		case @entry.activity.tracking
		when 'started'
			i = ">"
		when 'paused'
			i = "="
		when 'completed'
			i = "#"
		else
			i = "*"
		end
		(@entry.activity.foreground.blank?) ? "{#{i}}" : "[#{i}]"
	end

	entry = [index, timestamp, icon, text].join ' '

	def record(r)
		@padding+'  '+"->"+' '+item("Start", r.start.textualize)+" - "+item("End", r.end.textualize)+"\n"
	end

	records =	@entry.records.map { |r| record(r) }.join
	
	_start = item "Start", @entry.activity.start.textualize
	
	_end = item "End", @entry.activity.end.textualize
	
	tracked_duration = item "Tracked Duration", @entry.activity.tracked_duration.textualize(RedBook.config.duration_format)
	
	duration = item "Duration", @entry.activity.duration.textualize(RedBook.config.duration_format)

	durations = @padding+'  '+[duration, tracked_duration].join(' - ')
	timespan = @padding+'  '+[_start, _end].join(' - ')
	
##### TEMPLATE #####	
	%><%= entry %><%= @partial.call :_tags, :tags => @entry.tags if @entry.respond_to? :tags %>
<% if @details then %><%= timespan %>
<%= records unless @entry.records.blank? %><%= durations %><% end %>
